name: Code coverage

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper comparison

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libgtest-dev lcov gcovr bc

      - name: Configure CMake with coverage
        run: cmake -B build -DCODE_COVERAGE=ON

      - name: Build
        run: cmake --build build

      - name: Run tests
        working-directory: build
        run: ctest --verbose

      - name: Generate coverage report
        run: |
          lcov --directory . --capture --output-file coverage.info --ignore-errors mismatch,gcov,unused
          lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage.info --ignore-errors unused
          lcov --list coverage.info

      - name: Generate coverage comment
        if: github.event_name == 'pull_request'
        run: |
          # Extract the line and function coverage percentages
          LINE_COVERAGE=$(lcov --list coverage.info | grep 'Total:' | awk '{print $2}' | sed 's/%//g')
          FUNCTION_COVERAGE=$(lcov --list coverage.info | grep 'Total:' | awk '{print $4}' | sed 's/%//g')

          # Make sure coverage values are not empty
          if [ -z "$LINE_COVERAGE" ]; then
          echo "Failed to extract line coverage percentage"
          LINE_COVERAGE="0.0"
          fi
          if [ -z "$FUNCTION_COVERAGE" ]; then
          echo "Failed to extract function coverage percentage"
          FUNCTION_COVERAGE="0.0"
          fi

          # Try to get previous coverage from main branch
          git fetch origin ${{ github.base_ref }} 2>/dev/null || true
          git checkout FETCH_HEAD 2>/dev/null || true
          if [ -f ".previous_line_coverage" ]; then
          PREVIOUS_LINE_COVERAGE=$(cat .previous_line_coverage)
          else
          PREVIOUS_LINE_COVERAGE="0.0"
          fi
          if [ -f ".previous_function_coverage" ]; then
          PREVIOUS_FUNCTION_COVERAGE=$(cat .previous_function_coverage)
          else
          PREVIOUS_FUNCTION_COVERAGE="0.0"
          fi

          # Return to PR branch
          git checkout ${{ github.sha }} 2>/dev/null || true

          # Ensure previous coverage values are not empty
          if [ -z "$PREVIOUS_LINE_COVERAGE" ]; then
          PREVIOUS_LINE_COVERAGE="0.0"
          fi
          if [ -z "$PREVIOUS_FUNCTION_COVERAGE" ]; then
          PREVIOUS_FUNCTION_COVERAGE="0.0"
          fi

          # Calculate the differences (with error handling)
          LINE_DIFF=$(echo "$LINE_COVERAGE - $PREVIOUS_LINE_COVERAGE" | bc 2>/dev/null || echo "0")
          FUNCTION_DIFF=$(echo "$FUNCTION_COVERAGE - $PREVIOUS_FUNCTION_COVERAGE" | bc 2>/dev/null || echo "0")

          # Format differences to 2 decimal places
          LINE_DIFF=$(printf "%.2f" $LINE_DIFF)
          FUNCTION_DIFF=$(printf "%.2f" $FUNCTION_DIFF)

          # Determine if line coverage increased or decreased
          if (( $(echo "$LINE_DIFF > 0" | bc -l) )); then
          LINE_CHANGE="increased by ${LINE_DIFF}%"
          LINE_EMOJI="ðŸŽ‰"
          elif (( $(echo "$LINE_DIFF < 0" | bc -l) )); then
          LINE_CHANGE="decreased by $(echo "${LINE_DIFF#-}")%"  # Remove minus sign
          LINE_EMOJI="ðŸ”»"
          else
          LINE_CHANGE="unchanged"
          LINE_EMOJI="ðŸ”„"
          fi

          # Determine if function coverage increased or decreased
          if (( $(echo "$FUNCTION_DIFF > 0" | bc -l) )); then
          FUNCTION_CHANGE="increased by ${FUNCTION_DIFF}%"
          FUNCTION_EMOJI="ðŸŽ‰"
          elif (( $(echo "$FUNCTION_DIFF < 0" | bc -l) )); then
          FUNCTION_CHANGE="decreased by $(echo "${FUNCTION_DIFF#-}")%"  # Remove minus sign
          FUNCTION_EMOJI="ðŸ”»"
          else
          FUNCTION_CHANGE="unchanged"
          FUNCTION_EMOJI="ðŸ”„"
          fi

          # Create markdown for the comment
          cat > line-coverage-comment.md << EOF
          ## Line Coverage Report ${LINE_EMOJI}

          Current line coverage: **${LINE_COVERAGE}%**
          Previous line coverage: **${PREVIOUS_LINE_COVERAGE}%**
          Line coverage has ${LINE_CHANGE}

          <details>
          <summary>Click to see detailed line coverage report</summary>

          \`\`\`
          $(lcov --list coverage.info)
          \`\`\`

          </details>
          EOF

          cat > function-coverage-comment.md << EOF
          ## Function Coverage Report ${FUNCTION_EMOJI}

          Current function coverage: **${FUNCTION_COVERAGE}%**
          Previous function coverage: **${PREVIOUS_FUNCTION_COVERAGE}%**
          Function coverage has ${FUNCTION_CHANGE}

          <details>
          <summary>Click to see detailed function coverage report</summary>

          \`\`\`
          $(lcov --list coverage.info)
          \`\`\`

          </details>
          EOF

          # Store the current coverage for future comparison
          echo "$LINE_COVERAGE" > .previous_line_coverage
          echo "$FUNCTION_COVERAGE" > .previous_function_coverage

          - name: Comment PR with line coverage info
            if: github.event_name == 'pull_request'
            uses: marocchino/sticky-pull-request-comment@v2
            with:
              recreate: true
              path: line-coverage-comment.md

          - name: Comment PR with function coverage info
            if: github.event_name == 'pull_request'
            uses: marocchino/sticky-pull-request-comment@v2
            with:
              recreate: true
              path: function-coverage-comment.md

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.info
          fail_ci_if_error: false
          verbose: true

      - name: Generate HTML coverage report
        run: genhtml coverage.info --output-directory coverage_report

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report/

      - name: Comment PR with coverage info
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage-comment.md
