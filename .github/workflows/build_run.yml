name: Build and Run

on:
  pull_request:
  workflow_dispatch:  # Allows manual triggering

jobs:
  # ✅ 1. Install Dependencies (Shared Across Jobs)
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Dependencies (GoogleTest)
        id: cache-gtest
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/include/gtest
            /usr/local/lib/libgtest.a
            /usr/local/lib/libgtest_main.a
          key: gtest-${{ runner.os }}

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      - name: Build and Install GoogleTest (if not cached)
        if: steps.cache-gtest.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/google/googletest.git /tmp/googletest
          cd /tmp/googletest
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local .
          make -j$(nproc)
          sudo make install

      - name: Verify GTest Installation
        run: |
          ls -l /usr/local/lib | grep gtest
          ls -l /usr/local/include/gtest

  # ✅ 2. Build Project (Depends on Dependencies)
  build:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Build Directory
        run: mkdir -p build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/build
        run: cmake ..

      - name: Build Project
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config Release

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-project
          path: build/

  # ✅ 3. Run Main Executable (Parallel to Tests)
  run-executable:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-project
          path: build/

      - name: Run Main Executable
        working-directory: ${{ github.workspace }}/build
        run: |
          if [ -f "./vision_based_swarm" ]; then
            ./vision_based_swarm
          elif [ -f "./src/vision_based_swarm" ]; then
            ./src/vision_based_swarm
          else
            echo "Executable not found. Listing build directory contents:"
            find . -type f -executable -print
            exit 1
          fi

  # ✅ 4. Run Unit Tests (Parallel to Executable)
  run-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-project
          path: build/

      - name: Run All Unit Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          set -e
          test_binaries=$(find . -maxdepth 1 -type f -executable -name "test_*")

          if [ -z "$test_binaries" ]; then
            echo "No unit test executables found."
            find . -type f -executable -print
            exit 1
          fi

          for test in $test_binaries; do
            echo "Running $test..."
            $test
          done
